package com.example.demo.services;

import com.example.demo.exceptions.MailAlreadyUsedException;
import com.example.demo.exceptions.NoSuchEntityException;
import com.example.demo.exceptions.NoTimeSlotsException;
import com.example.demo.exceptions.TimeSlotFullException;
import com.example.demo.model.dtos.CustomerDTO;
import com.example.demo.model.dtos.LineNumberDTO;
import com.example.demo.model.entities.*;
import com.example.demo.repositories.CustomerRepository;
import com.example.demo.repositories.LineNumberRepository;
import com.example.demo.repositories.StoreRepository;
import com.example.demo.repositories.TimeSlotRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CustomerServiceTest {

    @Mock
    private CustomerRepository mockCustomerRepository;
    @Mock
    private StoreRepository mockStoreRepository;
    @Mock
    private TimeSlotRepository mockTimeSlotRepository;
    @Mock
    private LineNumberRepository mockLineNumberRepository;

    private CustomerService customerServiceUnderTest;

    @Before
    public void setUp() {
        customerServiceUnderTest = new CustomerService(mockCustomerRepository, mockStoreRepository, mockTimeSlotRepository, mockLineNumberRepository);
    }

    @Test
    public void testBookFutureLineNUmber() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        timeSlot6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setTimeSlot(timeSlot6);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber7.setStore(store10);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber7);

        // Run the test
        final LineNumber result = customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test(expected = TimeSlotFullException.class)
    public void testBookFutureLineNUmber_ThrowsTimeSlotFullException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        timeSlot6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setTimeSlot(timeSlot6);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber7.setStore(store10);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber7);

        // Run the test
        customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);
    }

    @Test(expected = NoTimeSlotsException.class)
    public void testBookFutureLineNUmber_ThrowsNoTimeSlotsException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        timeSlot6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setTimeSlot(timeSlot6);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber7.setStore(store10);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber7);

        // Run the test
        customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);
    }

    @Test(expected = NoSuchEntityException.class)
    public void testBookFutureLineNUmber_ThrowsNoSuchEntityException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        timeSlot6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setTimeSlot(timeSlot6);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber7.setStore(store10);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber7);

        // Run the test
        customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);
    }

    @Test
    public void testBookFutureLineNUmber_StoreRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        when(mockStoreRepository.findById(0)).thenReturn(Optional.empty());

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store3.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee3));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store4.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee4));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store5.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store5.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee5));
        timeSlot4.setStore(store5);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        store6.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store6.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee6));
        lineNumber5.setStore(store6);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber5));
        final Optional<TimeSlot> timeSlot3 = Optional.of(timeSlot4);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot3);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        store7.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store7.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee7));
        timeSlot5.setStore(store7);
        timeSlot5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setTimeSlot(timeSlot5);
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store8.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee8));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber6);

        // Run the test
        final LineNumber result = customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testBookFutureLineNUmber_TimeSlotRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        when(mockTimeSlotRepository.findById(0)).thenReturn(Optional.empty());

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        store7.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot4.setStore(store7);
        timeSlot4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setTimeSlot(timeSlot4);
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber5.setStore(store8);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber5);

        // Run the test
        final LineNumber result = customerServiceUnderTest.bookFutureLineNUmber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testAvailableTimeSlots() {
        // Setup

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Run the test
        final List<TimeSlot> result = customerServiceUnderTest.availableTimeSlots(0, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test(expected = NoSuchEntityException.class)
    public void testAvailableTimeSlots_ThrowsNoSuchEntityException() {
        // Setup

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Run the test
        customerServiceUnderTest.availableTimeSlots(0, 0L);
    }

    @Test
    public void testAvailableTimeSlots_StoreRepositoryFindByIdReturnsAbsent() {
        // Setup
        when(mockStoreRepository.findById(0)).thenReturn(Optional.empty());

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        lineNumber.setTimeSlot(new TimeSlot());
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber1.setStore(store1);
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        timeSlot.setLineNumbers(Arrays.asList(lineNumber1));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot);

        // Configure StoreRepository.save(...).
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setTimeSlot(timeSlot1);
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store2.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store2);

        // Run the test
        final List<TimeSlot> result = customerServiceUnderTest.availableTimeSlots(0, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testCalcETA() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store5.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        timeSlot4.setStore(store5);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        store6.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        lineNumber5.setStore(store6);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber5));
        final Optional<TimeSlot> timeSlot3 = Optional.of(timeSlot4);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot3);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Run the test
        final int result = customerServiceUnderTest.calcETA(lineNumberDTO, 0L);

        // Verify the results
        assertEquals(0, result);
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test(expected = NoSuchEntityException.class)
    public void testCalcETA_ThrowsNoSuchEntityException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store5.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        timeSlot4.setStore(store5);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        store6.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        lineNumber5.setStore(store6);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber5));
        final Optional<TimeSlot> timeSlot3 = Optional.of(timeSlot4);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot3);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Run the test
        customerServiceUnderTest.calcETA(lineNumberDTO, 0L);
    }

    @Test(expected = NoTimeSlotsException.class)
    public void testCalcETA_ThrowsNoTimeSlotsException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store5.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        timeSlot4.setStore(store5);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        store6.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        lineNumber5.setStore(store6);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber5));
        final Optional<TimeSlot> timeSlot3 = Optional.of(timeSlot4);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot3);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Run the test
        customerServiceUnderTest.calcETA(lineNumberDTO, 0L);
    }

    @Test
    public void testCalcETA_StoreRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        when(mockStoreRepository.findById(0)).thenReturn(Optional.empty());

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        lineNumber.setTimeSlot(new TimeSlot());
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber1.setStore(store1);
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        timeSlot.setLineNumbers(Arrays.asList(lineNumber1));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot);

        // Configure StoreRepository.save(...).
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setTimeSlot(timeSlot1);
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store2.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store2);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store3.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store3.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee3));
        timeSlot3.setStore(store3);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        store4.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store4.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee4));
        lineNumber4.setStore(store4);
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        timeSlot3.setLineNumbers(Arrays.asList(lineNumber4));
        final Optional<TimeSlot> timeSlot2 = Optional.of(timeSlot3);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot2);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Run the test
        final int result = customerServiceUnderTest.calcETA(lineNumberDTO, 0L);

        // Verify the results
        assertEquals(0, result);
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testCalcETA_TimeSlotRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store2.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee1));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        when(mockTimeSlotRepository.findById(0)).thenReturn(Optional.empty());
        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Run the test
        final int result = customerServiceUnderTest.calcETA(lineNumberDTO, 0L);

        // Verify the results
        assertEquals(0, result);
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testRetrieveLineNumber() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Configure TimeSlotRepository.getTimeSlotAt(...).
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        lineNumber7.setTimeSlot(new TimeSlot());
        lineNumber7.setStore(new Store());
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        store9.setLineNumbers(Arrays.asList(lineNumber7));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        final LineNumber lineNumber8 = new LineNumber();
        lineNumber8.setId(0);
        lineNumber8.setStatus("status");
        lineNumber8.setNumber(0);
        lineNumber8.setFrom(0L);
        lineNumber8.setUntil(0L);
        lineNumber8.setTimeSlot(new TimeSlot());
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber8.setStore(store10);
        final Customer customer8 = new Customer();
        customer8.setId(0);
        customer8.setName("name");
        customer8.setSurname("surname");
        customer8.setPhoneNumber("phoneNumber");
        customer8.setEmail("email");
        customer8.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber8.setCustomer(customer8);
        timeSlot6.setLineNumbers(Arrays.asList(lineNumber8));
        when(mockTimeSlotRepository.getTimeSlotAt(0, 0L)).thenReturn(timeSlot6);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber9 = new LineNumber();
        lineNumber9.setId(0);
        lineNumber9.setStatus("status");
        lineNumber9.setNumber(0);
        lineNumber9.setFrom(0L);
        lineNumber9.setUntil(0L);
        final TimeSlot timeSlot7 = new TimeSlot();
        timeSlot7.setId(0);
        timeSlot7.setStartTime(0L);
        timeSlot7.setEndTime(0L);
        final Store store11 = new Store();
        store11.setId(0);
        store11.setName("name");
        store11.setDescription("description");
        store11.setLongitude(0.0);
        store11.setLatitude(0.0);
        store11.setMaxCustomers(0);
        store11.setTimeOut(0);
        store11.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour10 = new WorkingHour();
        workingHour10.setId(0);
        workingHour10.setFrom(0);
        workingHour10.setUntil(0);
        workingHour10.setStore(new Store());
        store11.setWorkingHour(workingHour10);
        final Employee employee10 = new Employee();
        employee10.setId(0);
        employee10.setEmail("email");
        employee10.setRole("role");
        employee10.setStore(new Store());
        store11.setEmployees(Arrays.asList(employee10));
        timeSlot7.setStore(store11);
        timeSlot7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setTimeSlot(timeSlot7);
        final Store store12 = new Store();
        store12.setId(0);
        store12.setName("name");
        store12.setDescription("description");
        store12.setLongitude(0.0);
        store12.setLatitude(0.0);
        store12.setMaxCustomers(0);
        store12.setTimeOut(0);
        store12.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour11 = new WorkingHour();
        workingHour11.setId(0);
        workingHour11.setFrom(0);
        workingHour11.setUntil(0);
        workingHour11.setStore(new Store());
        store12.setWorkingHour(workingHour11);
        final Employee employee11 = new Employee();
        employee11.setId(0);
        employee11.setEmail("email");
        employee11.setRole("role");
        employee11.setStore(new Store());
        store12.setEmployees(Arrays.asList(employee11));
        lineNumber9.setStore(store12);
        final Customer customer9 = new Customer();
        customer9.setId(0);
        customer9.setName("name");
        customer9.setSurname("surname");
        customer9.setPhoneNumber("phoneNumber");
        customer9.setEmail("email");
        customer9.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setCustomer(customer9);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber9);

        // Run the test
        final LineNumber result = customerServiceUnderTest.retrieveLineNumber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test(expected = NoTimeSlotsException.class)
    public void testRetrieveLineNumber_ThrowsNoTimeSlotsException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Configure TimeSlotRepository.getTimeSlotAt(...).
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        lineNumber7.setTimeSlot(new TimeSlot());
        lineNumber7.setStore(new Store());
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        store9.setLineNumbers(Arrays.asList(lineNumber7));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        final LineNumber lineNumber8 = new LineNumber();
        lineNumber8.setId(0);
        lineNumber8.setStatus("status");
        lineNumber8.setNumber(0);
        lineNumber8.setFrom(0L);
        lineNumber8.setUntil(0L);
        lineNumber8.setTimeSlot(new TimeSlot());
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber8.setStore(store10);
        final Customer customer8 = new Customer();
        customer8.setId(0);
        customer8.setName("name");
        customer8.setSurname("surname");
        customer8.setPhoneNumber("phoneNumber");
        customer8.setEmail("email");
        customer8.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber8.setCustomer(customer8);
        timeSlot6.setLineNumbers(Arrays.asList(lineNumber8));
        when(mockTimeSlotRepository.getTimeSlotAt(0, 0L)).thenReturn(timeSlot6);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber9 = new LineNumber();
        lineNumber9.setId(0);
        lineNumber9.setStatus("status");
        lineNumber9.setNumber(0);
        lineNumber9.setFrom(0L);
        lineNumber9.setUntil(0L);
        final TimeSlot timeSlot7 = new TimeSlot();
        timeSlot7.setId(0);
        timeSlot7.setStartTime(0L);
        timeSlot7.setEndTime(0L);
        final Store store11 = new Store();
        store11.setId(0);
        store11.setName("name");
        store11.setDescription("description");
        store11.setLongitude(0.0);
        store11.setLatitude(0.0);
        store11.setMaxCustomers(0);
        store11.setTimeOut(0);
        store11.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour10 = new WorkingHour();
        workingHour10.setId(0);
        workingHour10.setFrom(0);
        workingHour10.setUntil(0);
        workingHour10.setStore(new Store());
        store11.setWorkingHour(workingHour10);
        final Employee employee10 = new Employee();
        employee10.setId(0);
        employee10.setEmail("email");
        employee10.setRole("role");
        employee10.setStore(new Store());
        store11.setEmployees(Arrays.asList(employee10));
        timeSlot7.setStore(store11);
        timeSlot7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setTimeSlot(timeSlot7);
        final Store store12 = new Store();
        store12.setId(0);
        store12.setName("name");
        store12.setDescription("description");
        store12.setLongitude(0.0);
        store12.setLatitude(0.0);
        store12.setMaxCustomers(0);
        store12.setTimeOut(0);
        store12.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour11 = new WorkingHour();
        workingHour11.setId(0);
        workingHour11.setFrom(0);
        workingHour11.setUntil(0);
        workingHour11.setStore(new Store());
        store12.setWorkingHour(workingHour11);
        final Employee employee11 = new Employee();
        employee11.setId(0);
        employee11.setEmail("email");
        employee11.setRole("role");
        employee11.setStore(new Store());
        store12.setEmployees(Arrays.asList(employee11));
        lineNumber9.setStore(store12);
        final Customer customer9 = new Customer();
        customer9.setId(0);
        customer9.setName("name");
        customer9.setSurname("surname");
        customer9.setPhoneNumber("phoneNumber");
        customer9.setEmail("email");
        customer9.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setCustomer(customer9);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber9);

        // Run the test
        customerServiceUnderTest.retrieveLineNumber(lineNumberDTO, customer, 0L);
    }

    @Test(expected = NoSuchEntityException.class)
    public void testRetrieveLineNumber_ThrowsNoSuchEntityException() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber6));
        final Optional<TimeSlot> timeSlot4 = Optional.of(timeSlot5);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot4);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Configure TimeSlotRepository.getTimeSlotAt(...).
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        lineNumber7.setTimeSlot(new TimeSlot());
        lineNumber7.setStore(new Store());
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        store9.setLineNumbers(Arrays.asList(lineNumber7));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot6.setStore(store9);
        final LineNumber lineNumber8 = new LineNumber();
        lineNumber8.setId(0);
        lineNumber8.setStatus("status");
        lineNumber8.setNumber(0);
        lineNumber8.setFrom(0L);
        lineNumber8.setUntil(0L);
        lineNumber8.setTimeSlot(new TimeSlot());
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber8.setStore(store10);
        final Customer customer8 = new Customer();
        customer8.setId(0);
        customer8.setName("name");
        customer8.setSurname("surname");
        customer8.setPhoneNumber("phoneNumber");
        customer8.setEmail("email");
        customer8.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber8.setCustomer(customer8);
        timeSlot6.setLineNumbers(Arrays.asList(lineNumber8));
        when(mockTimeSlotRepository.getTimeSlotAt(0, 0L)).thenReturn(timeSlot6);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber9 = new LineNumber();
        lineNumber9.setId(0);
        lineNumber9.setStatus("status");
        lineNumber9.setNumber(0);
        lineNumber9.setFrom(0L);
        lineNumber9.setUntil(0L);
        final TimeSlot timeSlot7 = new TimeSlot();
        timeSlot7.setId(0);
        timeSlot7.setStartTime(0L);
        timeSlot7.setEndTime(0L);
        final Store store11 = new Store();
        store11.setId(0);
        store11.setName("name");
        store11.setDescription("description");
        store11.setLongitude(0.0);
        store11.setLatitude(0.0);
        store11.setMaxCustomers(0);
        store11.setTimeOut(0);
        store11.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour10 = new WorkingHour();
        workingHour10.setId(0);
        workingHour10.setFrom(0);
        workingHour10.setUntil(0);
        workingHour10.setStore(new Store());
        store11.setWorkingHour(workingHour10);
        final Employee employee10 = new Employee();
        employee10.setId(0);
        employee10.setEmail("email");
        employee10.setRole("role");
        employee10.setStore(new Store());
        store11.setEmployees(Arrays.asList(employee10));
        timeSlot7.setStore(store11);
        timeSlot7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setTimeSlot(timeSlot7);
        final Store store12 = new Store();
        store12.setId(0);
        store12.setName("name");
        store12.setDescription("description");
        store12.setLongitude(0.0);
        store12.setLatitude(0.0);
        store12.setMaxCustomers(0);
        store12.setTimeOut(0);
        store12.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour11 = new WorkingHour();
        workingHour11.setId(0);
        workingHour11.setFrom(0);
        workingHour11.setUntil(0);
        workingHour11.setStore(new Store());
        store12.setWorkingHour(workingHour11);
        final Employee employee11 = new Employee();
        employee11.setId(0);
        employee11.setEmail("email");
        employee11.setRole("role");
        employee11.setStore(new Store());
        store12.setEmployees(Arrays.asList(employee11));
        lineNumber9.setStore(store12);
        final Customer customer9 = new Customer();
        customer9.setId(0);
        customer9.setName("name");
        customer9.setSurname("surname");
        customer9.setPhoneNumber("phoneNumber");
        customer9.setEmail("email");
        customer9.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber9.setCustomer(customer9);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber9);

        // Run the test
        customerServiceUnderTest.retrieveLineNumber(lineNumberDTO, customer, 0L);
    }

    @Test
    public void testRetrieveLineNumber_StoreRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        when(mockStoreRepository.findById(0)).thenReturn(Optional.empty());

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        lineNumber1.setTimeSlot(new TimeSlot());
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store2.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        timeSlot1.setStore(store2);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store3.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee3));
        lineNumber2.setStore(store3);
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        timeSlot1.setLineNumbers(Arrays.asList(lineNumber2));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot1);

        // Configure StoreRepository.save(...).
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        timeSlot2.setStore(new Store());
        timeSlot2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setTimeSlot(timeSlot2);
        lineNumber3.setStore(new Store());
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        store4.setLineNumbers(Arrays.asList(lineNumber3));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store4.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee4));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store4);

        // Configure TimeSlotRepository.findById(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        lineNumber4.setTimeSlot(new TimeSlot());
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store5.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store5.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee5));
        timeSlot4.setStore(store5);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        store6.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store6.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee6));
        lineNumber5.setStore(store6);
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber5));
        final Optional<TimeSlot> timeSlot3 = Optional.of(timeSlot4);
        when(mockTimeSlotRepository.findById(0)).thenReturn(timeSlot3);

        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Configure TimeSlotRepository.getTimeSlotAt(...).
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        lineNumber6.setStore(new Store());
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        store7.setLineNumbers(Arrays.asList(lineNumber6));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store7.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee7));
        timeSlot5.setStore(store7);
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        lineNumber7.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store8.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee8));
        lineNumber7.setStore(store8);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        timeSlot5.setLineNumbers(Arrays.asList(lineNumber7));
        when(mockTimeSlotRepository.getTimeSlotAt(0, 0L)).thenReturn(timeSlot5);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber8 = new LineNumber();
        lineNumber8.setId(0);
        lineNumber8.setStatus("status");
        lineNumber8.setNumber(0);
        lineNumber8.setFrom(0L);
        lineNumber8.setUntil(0L);
        final TimeSlot timeSlot6 = new TimeSlot();
        timeSlot6.setId(0);
        timeSlot6.setStartTime(0L);
        timeSlot6.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store9.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee9));
        timeSlot6.setStore(store9);
        timeSlot6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber8.setTimeSlot(timeSlot6);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour10 = new WorkingHour();
        workingHour10.setId(0);
        workingHour10.setFrom(0);
        workingHour10.setUntil(0);
        workingHour10.setStore(new Store());
        store10.setWorkingHour(workingHour10);
        final Employee employee10 = new Employee();
        employee10.setId(0);
        employee10.setEmail("email");
        employee10.setRole("role");
        employee10.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee10));
        lineNumber8.setStore(store10);
        final Customer customer8 = new Customer();
        customer8.setId(0);
        customer8.setName("name");
        customer8.setSurname("surname");
        customer8.setPhoneNumber("phoneNumber");
        customer8.setEmail("email");
        customer8.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber8.setCustomer(customer8);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber8);

        // Run the test
        final LineNumber result = customerServiceUnderTest.retrieveLineNumber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testRetrieveLineNumber_TimeSlotRepositoryFindByIdReturnsAbsent() throws Exception {
        // Setup
        final LineNumberDTO lineNumberDTO = new LineNumberDTO(0L, 0L, 0, 0);
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer.setLineNumbers(Arrays.asList(lineNumber));

        // Configure StoreRepository.findById(...).
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        timeSlot1.setStore(new Store());
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        lineNumber1.setStore(new Store());
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        customer1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setCustomer(customer1);
        store3.setLineNumbers(Arrays.asList(lineNumber1));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store3.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee2));
        final Optional<Store> store2 = Optional.of(store3);
        when(mockStoreRepository.findById(0)).thenReturn(store2);

        // Configure TimeSlotRepository.save(...).
        final TimeSlot timeSlot2 = new TimeSlot();
        timeSlot2.setId(0);
        timeSlot2.setStartTime(0L);
        timeSlot2.setEndTime(0L);
        final Store store4 = new Store();
        store4.setId(0);
        store4.setName("name");
        store4.setDescription("description");
        store4.setLongitude(0.0);
        store4.setLatitude(0.0);
        store4.setMaxCustomers(0);
        store4.setTimeOut(0);
        final LineNumber lineNumber2 = new LineNumber();
        lineNumber2.setId(0);
        lineNumber2.setStatus("status");
        lineNumber2.setNumber(0);
        lineNumber2.setFrom(0L);
        lineNumber2.setUntil(0L);
        lineNumber2.setTimeSlot(new TimeSlot());
        lineNumber2.setStore(new Store());
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        customer2.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber2.setCustomer(customer2);
        store4.setLineNumbers(Arrays.asList(lineNumber2));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store4.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store4.setEmployees(Arrays.asList(employee3));
        timeSlot2.setStore(store4);
        final LineNumber lineNumber3 = new LineNumber();
        lineNumber3.setId(0);
        lineNumber3.setStatus("status");
        lineNumber3.setNumber(0);
        lineNumber3.setFrom(0L);
        lineNumber3.setUntil(0L);
        lineNumber3.setTimeSlot(new TimeSlot());
        final Store store5 = new Store();
        store5.setId(0);
        store5.setName("name");
        store5.setDescription("description");
        store5.setLongitude(0.0);
        store5.setLatitude(0.0);
        store5.setMaxCustomers(0);
        store5.setTimeOut(0);
        store5.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour4 = new WorkingHour();
        workingHour4.setId(0);
        workingHour4.setFrom(0);
        workingHour4.setUntil(0);
        workingHour4.setStore(new Store());
        store5.setWorkingHour(workingHour4);
        final Employee employee4 = new Employee();
        employee4.setId(0);
        employee4.setEmail("email");
        employee4.setRole("role");
        employee4.setStore(new Store());
        store5.setEmployees(Arrays.asList(employee4));
        lineNumber3.setStore(store5);
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        customer3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber3.setCustomer(customer3);
        timeSlot2.setLineNumbers(Arrays.asList(lineNumber3));
        when(mockTimeSlotRepository.save(any(TimeSlot.class))).thenReturn(timeSlot2);

        // Configure StoreRepository.save(...).
        final Store store6 = new Store();
        store6.setId(0);
        store6.setName("name");
        store6.setDescription("description");
        store6.setLongitude(0.0);
        store6.setLatitude(0.0);
        store6.setMaxCustomers(0);
        store6.setTimeOut(0);
        final LineNumber lineNumber4 = new LineNumber();
        lineNumber4.setId(0);
        lineNumber4.setStatus("status");
        lineNumber4.setNumber(0);
        lineNumber4.setFrom(0L);
        lineNumber4.setUntil(0L);
        final TimeSlot timeSlot3 = new TimeSlot();
        timeSlot3.setId(0);
        timeSlot3.setStartTime(0L);
        timeSlot3.setEndTime(0L);
        timeSlot3.setStore(new Store());
        timeSlot3.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setTimeSlot(timeSlot3);
        lineNumber4.setStore(new Store());
        final Customer customer4 = new Customer();
        customer4.setId(0);
        customer4.setName("name");
        customer4.setSurname("surname");
        customer4.setPhoneNumber("phoneNumber");
        customer4.setEmail("email");
        customer4.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber4.setCustomer(customer4);
        store6.setLineNumbers(Arrays.asList(lineNumber4));
        final WorkingHour workingHour5 = new WorkingHour();
        workingHour5.setId(0);
        workingHour5.setFrom(0);
        workingHour5.setUntil(0);
        workingHour5.setStore(new Store());
        store6.setWorkingHour(workingHour5);
        final Employee employee5 = new Employee();
        employee5.setId(0);
        employee5.setEmail("email");
        employee5.setRole("role");
        employee5.setStore(new Store());
        store6.setEmployees(Arrays.asList(employee5));
        when(mockStoreRepository.save(any(Store.class))).thenReturn(store6);

        when(mockTimeSlotRepository.findById(0)).thenReturn(Optional.empty());
        when(mockLineNumberRepository.overLapsAt(0, 0L)).thenReturn(0);

        // Configure TimeSlotRepository.getTimeSlotAt(...).
        final TimeSlot timeSlot4 = new TimeSlot();
        timeSlot4.setId(0);
        timeSlot4.setStartTime(0L);
        timeSlot4.setEndTime(0L);
        final Store store7 = new Store();
        store7.setId(0);
        store7.setName("name");
        store7.setDescription("description");
        store7.setLongitude(0.0);
        store7.setLatitude(0.0);
        store7.setMaxCustomers(0);
        store7.setTimeOut(0);
        final LineNumber lineNumber5 = new LineNumber();
        lineNumber5.setId(0);
        lineNumber5.setStatus("status");
        lineNumber5.setNumber(0);
        lineNumber5.setFrom(0L);
        lineNumber5.setUntil(0L);
        lineNumber5.setTimeSlot(new TimeSlot());
        lineNumber5.setStore(new Store());
        final Customer customer5 = new Customer();
        customer5.setId(0);
        customer5.setName("name");
        customer5.setSurname("surname");
        customer5.setPhoneNumber("phoneNumber");
        customer5.setEmail("email");
        customer5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber5.setCustomer(customer5);
        store7.setLineNumbers(Arrays.asList(lineNumber5));
        final WorkingHour workingHour6 = new WorkingHour();
        workingHour6.setId(0);
        workingHour6.setFrom(0);
        workingHour6.setUntil(0);
        workingHour6.setStore(new Store());
        store7.setWorkingHour(workingHour6);
        final Employee employee6 = new Employee();
        employee6.setId(0);
        employee6.setEmail("email");
        employee6.setRole("role");
        employee6.setStore(new Store());
        store7.setEmployees(Arrays.asList(employee6));
        timeSlot4.setStore(store7);
        final LineNumber lineNumber6 = new LineNumber();
        lineNumber6.setId(0);
        lineNumber6.setStatus("status");
        lineNumber6.setNumber(0);
        lineNumber6.setFrom(0L);
        lineNumber6.setUntil(0L);
        lineNumber6.setTimeSlot(new TimeSlot());
        final Store store8 = new Store();
        store8.setId(0);
        store8.setName("name");
        store8.setDescription("description");
        store8.setLongitude(0.0);
        store8.setLatitude(0.0);
        store8.setMaxCustomers(0);
        store8.setTimeOut(0);
        store8.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour7 = new WorkingHour();
        workingHour7.setId(0);
        workingHour7.setFrom(0);
        workingHour7.setUntil(0);
        workingHour7.setStore(new Store());
        store8.setWorkingHour(workingHour7);
        final Employee employee7 = new Employee();
        employee7.setId(0);
        employee7.setEmail("email");
        employee7.setRole("role");
        employee7.setStore(new Store());
        store8.setEmployees(Arrays.asList(employee7));
        lineNumber6.setStore(store8);
        final Customer customer6 = new Customer();
        customer6.setId(0);
        customer6.setName("name");
        customer6.setSurname("surname");
        customer6.setPhoneNumber("phoneNumber");
        customer6.setEmail("email");
        customer6.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber6.setCustomer(customer6);
        timeSlot4.setLineNumbers(Arrays.asList(lineNumber6));
        when(mockTimeSlotRepository.getTimeSlotAt(0, 0L)).thenReturn(timeSlot4);

        // Configure LineNumberRepository.save(...).
        final LineNumber lineNumber7 = new LineNumber();
        lineNumber7.setId(0);
        lineNumber7.setStatus("status");
        lineNumber7.setNumber(0);
        lineNumber7.setFrom(0L);
        lineNumber7.setUntil(0L);
        final TimeSlot timeSlot5 = new TimeSlot();
        timeSlot5.setId(0);
        timeSlot5.setStartTime(0L);
        timeSlot5.setEndTime(0L);
        final Store store9 = new Store();
        store9.setId(0);
        store9.setName("name");
        store9.setDescription("description");
        store9.setLongitude(0.0);
        store9.setLatitude(0.0);
        store9.setMaxCustomers(0);
        store9.setTimeOut(0);
        store9.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour8 = new WorkingHour();
        workingHour8.setId(0);
        workingHour8.setFrom(0);
        workingHour8.setUntil(0);
        workingHour8.setStore(new Store());
        store9.setWorkingHour(workingHour8);
        final Employee employee8 = new Employee();
        employee8.setId(0);
        employee8.setEmail("email");
        employee8.setRole("role");
        employee8.setStore(new Store());
        store9.setEmployees(Arrays.asList(employee8));
        timeSlot5.setStore(store9);
        timeSlot5.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setTimeSlot(timeSlot5);
        final Store store10 = new Store();
        store10.setId(0);
        store10.setName("name");
        store10.setDescription("description");
        store10.setLongitude(0.0);
        store10.setLatitude(0.0);
        store10.setMaxCustomers(0);
        store10.setTimeOut(0);
        store10.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour9 = new WorkingHour();
        workingHour9.setId(0);
        workingHour9.setFrom(0);
        workingHour9.setUntil(0);
        workingHour9.setStore(new Store());
        store10.setWorkingHour(workingHour9);
        final Employee employee9 = new Employee();
        employee9.setId(0);
        employee9.setEmail("email");
        employee9.setRole("role");
        employee9.setStore(new Store());
        store10.setEmployees(Arrays.asList(employee9));
        lineNumber7.setStore(store10);
        final Customer customer7 = new Customer();
        customer7.setId(0);
        customer7.setName("name");
        customer7.setSurname("surname");
        customer7.setPhoneNumber("phoneNumber");
        customer7.setEmail("email");
        customer7.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber7.setCustomer(customer7);
        when(mockLineNumberRepository.save(any(LineNumber.class))).thenReturn(lineNumber7);

        // Run the test
        final LineNumber result = customerServiceUnderTest.retrieveLineNumber(lineNumberDTO, customer, 0L);

        // Verify the results
        verify(mockTimeSlotRepository).delete(any(TimeSlot.class));
    }

    @Test
    public void testGetStoreList() {
        // Setup

        // Configure StoreRepository.findAll(...).
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        final List<Store> stores = Arrays.asList(store);
        when(mockStoreRepository.findAll()).thenReturn(stores);

        // Run the test
        final List<Store> result = customerServiceUnderTest.getStoreList();

        // Verify the results
    }

    @Test
    public void testGetStoreList_StoreRepositoryReturnsNoItems() {
        // Setup
        when(mockStoreRepository.findAll()).thenReturn(Collections.emptyList());

        // Run the test
        final List<Store> result = customerServiceUnderTest.getStoreList();

        // Verify the results
    }

    @Test
    public void testGetStore() {
        // Setup

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Run the test
        final Store result = customerServiceUnderTest.getStore(0);

        // Verify the results
    }

    @Test(expected = NoSuchEntityException.class)
    public void testGetStore_ThrowsNoSuchEntityException() {
        // Setup

        // Configure StoreRepository.findById(...).
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        timeSlot.setStore(new Store());
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        lineNumber.setStore(new Store());
        final Customer customer = new Customer();
        customer.setId(0);
        customer.setName("name");
        customer.setSurname("surname");
        customer.setPhoneNumber("phoneNumber");
        customer.setEmail("email");
        customer.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setCustomer(customer);
        store1.setLineNumbers(Arrays.asList(lineNumber));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store1.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee));
        final Optional<Store> store = Optional.of(store1);
        when(mockStoreRepository.findById(0)).thenReturn(store);

        // Run the test
        customerServiceUnderTest.getStore(0);
    }

    @Test
    public void testGetStore_StoreRepositoryReturnsAbsent() {
        // Setup
        when(mockStoreRepository.findById(0)).thenReturn(Optional.empty());

        // Run the test
        final Store result = customerServiceUnderTest.getStore(0);

        // Verify the results
    }

    @Test
    public void testFindCustomerByEmail() {
        // Setup

        // Configure CustomerRepository.findByEmail(...).
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer1.setLineNumbers(Arrays.asList(lineNumber));
        final Optional<Customer> customer = Optional.of(customer1);
        when(mockCustomerRepository.findByEmail("email")).thenReturn(customer);

        // Run the test
        final Customer result = customerServiceUnderTest.findCustomerByEmail("email");

        // Verify the results
    }

    @Test(expected = NoSuchEntityException.class)
    public void testFindCustomerByEmail_ThrowsNoSuchEntityException() {
        // Setup

        // Configure CustomerRepository.findByEmail(...).
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer1.setLineNumbers(Arrays.asList(lineNumber));
        final Optional<Customer> customer = Optional.of(customer1);
        when(mockCustomerRepository.findByEmail("email")).thenReturn(customer);

        // Run the test
        customerServiceUnderTest.findCustomerByEmail("email");
    }

    @Test
    public void testFindCustomerByEmail_CustomerRepositoryReturnsAbsent() {
        // Setup
        when(mockCustomerRepository.findByEmail("email")).thenReturn(Optional.empty());

        // Run the test
        final Customer result = customerServiceUnderTest.findCustomerByEmail("email");

        // Verify the results
    }

    @Test
    public void testRegister() {
        // Setup
        final CustomerDTO customer = new CustomerDTO("name", "surname", "phoneNumber", "email");

        // Configure CustomerRepository.findByEmail(...).
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer2.setLineNumbers(Arrays.asList(lineNumber));
        final Optional<Customer> customer1 = Optional.of(customer2);
        when(mockCustomerRepository.findByEmail("email")).thenReturn(customer1);

        // Configure CustomerRepository.save(...).
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        store2.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        timeSlot1.setStore(store2);
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store3.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee3));
        lineNumber1.setStore(store3);
        lineNumber1.setCustomer(new Customer());
        customer3.setLineNumbers(Arrays.asList(lineNumber1));
        when(mockCustomerRepository.save(any(Customer.class))).thenReturn(customer3);

        // Run the test
        final Customer result = customerServiceUnderTest.register(customer);

        // Verify the results
    }

    @Test(expected = MailAlreadyUsedException.class)
    public void testRegister_ThrowsMailAlreadyUsedException() {
        // Setup
        final CustomerDTO customer = new CustomerDTO("name", "surname", "phoneNumber", "email");

        // Configure CustomerRepository.findByEmail(...).
        final Customer customer2 = new Customer();
        customer2.setId(0);
        customer2.setName("name");
        customer2.setSurname("surname");
        customer2.setPhoneNumber("phoneNumber");
        customer2.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer2.setLineNumbers(Arrays.asList(lineNumber));
        final Optional<Customer> customer1 = Optional.of(customer2);
        when(mockCustomerRepository.findByEmail("email")).thenReturn(customer1);

        // Configure CustomerRepository.save(...).
        final Customer customer3 = new Customer();
        customer3.setId(0);
        customer3.setName("name");
        customer3.setSurname("surname");
        customer3.setPhoneNumber("phoneNumber");
        customer3.setEmail("email");
        final LineNumber lineNumber1 = new LineNumber();
        lineNumber1.setId(0);
        lineNumber1.setStatus("status");
        lineNumber1.setNumber(0);
        lineNumber1.setFrom(0L);
        lineNumber1.setUntil(0L);
        final TimeSlot timeSlot1 = new TimeSlot();
        timeSlot1.setId(0);
        timeSlot1.setStartTime(0L);
        timeSlot1.setEndTime(0L);
        final Store store2 = new Store();
        store2.setId(0);
        store2.setName("name");
        store2.setDescription("description");
        store2.setLongitude(0.0);
        store2.setLatitude(0.0);
        store2.setMaxCustomers(0);
        store2.setTimeOut(0);
        store2.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour2 = new WorkingHour();
        workingHour2.setId(0);
        workingHour2.setFrom(0);
        workingHour2.setUntil(0);
        workingHour2.setStore(new Store());
        store2.setWorkingHour(workingHour2);
        final Employee employee2 = new Employee();
        employee2.setId(0);
        employee2.setEmail("email");
        employee2.setRole("role");
        employee2.setStore(new Store());
        store2.setEmployees(Arrays.asList(employee2));
        timeSlot1.setStore(store2);
        timeSlot1.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber1.setTimeSlot(timeSlot1);
        final Store store3 = new Store();
        store3.setId(0);
        store3.setName("name");
        store3.setDescription("description");
        store3.setLongitude(0.0);
        store3.setLatitude(0.0);
        store3.setMaxCustomers(0);
        store3.setTimeOut(0);
        store3.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour3 = new WorkingHour();
        workingHour3.setId(0);
        workingHour3.setFrom(0);
        workingHour3.setUntil(0);
        workingHour3.setStore(new Store());
        store3.setWorkingHour(workingHour3);
        final Employee employee3 = new Employee();
        employee3.setId(0);
        employee3.setEmail("email");
        employee3.setRole("role");
        employee3.setStore(new Store());
        store3.setEmployees(Arrays.asList(employee3));
        lineNumber1.setStore(store3);
        lineNumber1.setCustomer(new Customer());
        customer3.setLineNumbers(Arrays.asList(lineNumber1));
        when(mockCustomerRepository.save(any(Customer.class))).thenReturn(customer3);

        // Run the test
        customerServiceUnderTest.register(customer);
    }

    @Test
    public void testRegister_CustomerRepositoryFindByEmailReturnsAbsent() {
        // Setup
        final CustomerDTO customer = new CustomerDTO("name", "surname", "phoneNumber", "email");
        when(mockCustomerRepository.findByEmail("email")).thenReturn(Optional.empty());

        // Configure CustomerRepository.save(...).
        final Customer customer1 = new Customer();
        customer1.setId(0);
        customer1.setName("name");
        customer1.setSurname("surname");
        customer1.setPhoneNumber("phoneNumber");
        customer1.setEmail("email");
        final LineNumber lineNumber = new LineNumber();
        lineNumber.setId(0);
        lineNumber.setStatus("status");
        lineNumber.setNumber(0);
        lineNumber.setFrom(0L);
        lineNumber.setUntil(0L);
        final TimeSlot timeSlot = new TimeSlot();
        timeSlot.setId(0);
        timeSlot.setStartTime(0L);
        timeSlot.setEndTime(0L);
        final Store store = new Store();
        store.setId(0);
        store.setName("name");
        store.setDescription("description");
        store.setLongitude(0.0);
        store.setLatitude(0.0);
        store.setMaxCustomers(0);
        store.setTimeOut(0);
        store.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour = new WorkingHour();
        workingHour.setId(0);
        workingHour.setFrom(0);
        workingHour.setUntil(0);
        workingHour.setStore(new Store());
        store.setWorkingHour(workingHour);
        final Employee employee = new Employee();
        employee.setId(0);
        employee.setEmail("email");
        employee.setRole("role");
        employee.setStore(new Store());
        store.setEmployees(Arrays.asList(employee));
        timeSlot.setStore(store);
        timeSlot.setLineNumbers(Arrays.asList(new LineNumber()));
        lineNumber.setTimeSlot(timeSlot);
        final Store store1 = new Store();
        store1.setId(0);
        store1.setName("name");
        store1.setDescription("description");
        store1.setLongitude(0.0);
        store1.setLatitude(0.0);
        store1.setMaxCustomers(0);
        store1.setTimeOut(0);
        store1.setLineNumbers(Arrays.asList(new LineNumber()));
        final WorkingHour workingHour1 = new WorkingHour();
        workingHour1.setId(0);
        workingHour1.setFrom(0);
        workingHour1.setUntil(0);
        workingHour1.setStore(new Store());
        store1.setWorkingHour(workingHour1);
        final Employee employee1 = new Employee();
        employee1.setId(0);
        employee1.setEmail("email");
        employee1.setRole("role");
        employee1.setStore(new Store());
        store1.setEmployees(Arrays.asList(employee1));
        lineNumber.setStore(store1);
        lineNumber.setCustomer(new Customer());
        customer1.setLineNumbers(Arrays.asList(lineNumber));
        when(mockCustomerRepository.save(any(Customer.class))).thenReturn(customer1);

        // Run the test
        final Customer result = customerServiceUnderTest.register(customer);

        // Verify the results
    }
}
